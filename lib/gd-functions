#!/bin/bash
#
# gd-functions
# Helpers for Amazon GuardDuty

gd-detector-ids() {
  # type: query
  # Return detector IDs, only really useful for use by other functions
  local inputs=$(__bma_read_inputs $@)

  local default_query='
    DetectorIds[]
  '

  local query=$(__bma_read_switches $inputs | grep ^--query | cut -d\  -f2-)
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)
  [[ -z $query ]] && query=$default_query

  aws guardduty list-detectors                                    \
    --query "${query}"                                            \
    --output ${output:-"text"}
}

_gd-finding-ids() {
  # type: query
  # Return finding IDs, only really useful for use by other functions
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "detector-id" && return 1

  local default_query='
    FindingIds[]
  '

  local query=$(__bma_read_switches $inputs | grep ^--query | cut -d\  -f2-)
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)
  [[ -z $query ]] && query=$default_query

  aws guardduty list-findings                                     \
    --detector-id ${inputs}                                       \
    --query "${query}"                                            \
    --output ${output:-"text"}
}

gd-findings() {
  # type: query
  # return finding ID, description, count  and severity


  local inputs=$(__bma_read_inputs $@)
  local default_query='
    Findings[*][
      Id,
      Service.EventLastSeen,
      Title,
      Service.Count,
      Severity
    ]
  '

  local query=$(__bma_read_switches $inputs | grep ^--query | cut -d\  -f2-)
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)
  [[ -z $query ]] && query=$default_query


  for detector in $(gd-detector-ids); do
    local finding_ids="$(_gd-finding-ids $detector)"
    aws guardduty get-findings                                    \
      --detector-id "${detector}"                                 \
      --finding-ids ${finding_ids}                                \
      --query "${query}"                                          \
      --output ${output:-"text"}
  done
}

gd-archive() {
  # type: action
  # Archive the finding IDs passed in
  local inputs=$(__bma_read_inputs $@)
  if [[ -z "$inputs" ]]; then
    # Only return error if STDIN is a terminal
    [[ -t 0 ]] && __bma_usage "gd-archive [finding-id]" && return 1
    # Piping a list of no instances should not return an error
    return 0
  fi

  local detector_id=$(gd-detector-ids)

  aws guardduty archive-findings --detector-id $detector_id --finding-ids $inputs
}
